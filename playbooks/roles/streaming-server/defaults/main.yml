---
# Updated Streaming Server Deployment Default Variables for HLS/HTTPS
# File: playbooks/roles/streaming-server/defaults/main.yml

# Basic settings
app_name: "streaming-server"
app_namespace: "streaming"
docker_hub_image: "nginx"  # Using nginx as base for HLS streaming
docker_hub_tag: "alpine"
deployment_environment: "production"  # Changed from 'environment' to avoid Ansible conflicts

# Port configuration (updated for HLS/HTTPS)
app_http_port: 80
app_https_port: 443
metrics_port: 9090
expose_rtmp: false  # Disabled RTMP, using HLS instead

# Resource limits
app_memory_request: "32Mi"           # Was: "256Mi"
app_cpu_request: "10m"               # Was: "100m"
app_memory_limit: "64Mi"             # Was: "512Mi"
app_cpu_limit: "50m"                 # Was: "500m"

# Health check settings
app_health_path: "/health"
app_health_port: 80  # HTTP health checks
app_readiness_delay: 10
app_liveness_delay: 15
app_health_period: 5
app_liveness_period: 15

# Deployment-specific settings:
deployment_type: "Deployment"  
initial_replicas: 2            
min_replicas: 1               
max_replicas: 10              

# HPA settings:
enable_hpa: true              
hpa_target_cpu: 70            
hpa_target_memory: 80         

# Rolling update settings:
max_surge: "50%"              
max_unavailable: 0            

# Metrics settings
prometheus_scrape: "true"
metric_prefix: "hls_streaming"
latency_threshold: 0.1
metrics_window: "5m"
metrics_scrape_interval: "10s"
metrics_path: "/metrics"
metrics_interval: "5s"
metrics_endpoint: "/metrics"

# Service settings
service_type: "NodePort"
cloud_neg: '{"ingress": true}'

# SSL/TLS settings (self-signed for testing)
ssl_enabled: false
ssl_cert_type: "self_signed"  # Options: self_signed, cert_manager, manual

# HLS streaming settings
hls_enabled: true
hls_segment_time: 10  # seconds
hls_list_size: 6      # number of segments in playlist
hls_fragment_time: 2  # fragment duration

# Cache settings for HLS
cache_mount_path: "/var/cache/nginx/hls"
cache_host_path: "/var/cache/nginx/hls"
nginx_temp_path: "/var/cache/nginx/temp"

# Monitoring settings (simplified for testing)
monitoring_namespace: "monitoring"
deploy_monitoring: false  # Disabled for initial testing
install_prometheus: false
deploy_ingress: false     # Disabled for initial testing

# Autoscaler settings (disabled for testing)
deploy_autoscaler: false
autoscaler_namespace: "kube-system"

# Deployment options
connect_to_clusters: true
wait_for_rollout: true
rollout_timeout: 300
verify_deployment: true

# Ansible paths
manifests_dir: "/opt/k8s-manifests/{{ app_name }}"
kubeconfig_path: "/root/.kube/config"

# Nginx specific settings
nginx_worker_processes: "auto"
nginx_worker_connections: 1024
nginx_client_max_body_size: "100M"
nginx_keepalive_timeout: 65

# CORS settings for HLS
cors_enabled: true
cors_origins: "*"  # Allow all origins for testing
cors_methods: "GET, POST, OPTIONS"
cors_headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"

# Rate limiting
rate_limit_enabled: true
rate_limit_zone: "hls:10m"
rate_limit_rate: "10r/s"
rate_limit_burst: 20

# Security headers
security_headers_enabled: true
ssl_protocols: "TLSv1.2 TLSv1.3"
ssl_ciphers: "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384"

# Custom environment variables for containers
custom_env_vars:
  - name: STREAMING_TYPE
    value: "hls"
  - name: NGINX_ENTRYPOINT_QUIET_LOGS
    value: "1"

# Extra service annotations for GCP integration
extra_annotations:
  app.kubernetes.io/part-of: "streaming-platform"
  app.kubernetes.io/version: "v1.0.0"
  streaming.platform/type: "hls"



  # STORAGE CONFIGURATION FOR GCS FUSE MOUNTING

  # GCS FUSE Mount Configuration
  enable_gcs_mount : true

  # CSI Driver settings
  gcs_fuse_csi_driver_version : "main"  # Use latest stable
  gcs_fuse_csi_namespace : "gcs-fuse-csi-driver"

  # Mount options for optimal video streaming performance
  gcs_mount_options : "implicit-dirs,uid=101,gid=101,file-mode=644,dir-mode=755"
  gcs_metadata_cache_capacity : "32768"
  gcs_type_cache_max_size_mb : "1024"
  gcs_file_cache_capacity : "1000"

  # Workload Identity configuration
  enable_workload_identity : true
  gcs_service_account_name : "{{ app_name }}-sa"

  # Mount paths
  gcs_mount_path : "/mnt/videos"
  gcs_mount_readonly : true

  # Storage class configuration
  gcs_storage_class_name : "gcs-fuse-{{ bastion_region | default('unknown') }}"
  gcs_pv_name : "gcs-videos-pv-{{ bastion_region | default('unknown') }}"
  gcs_pvc_name : "gcs-videos-pvc"

  # Storage capacity (symbolic for GCS)
  gcs_storage_capacity : "1000Gi"

  # PVC binding timeout
  gcs_pvc_bind_timeout : 120

# Basic Auth settings
basic_auth_hash: "YWRtaW46JGFwcjEkc3ZSQ0I3ZkskSExiaWJIU0cuYTMyTWNmOWdQWWdFLwo="