---
# File: playbooks/roles/streaming-server/tasks/deploy-mci.yml
# Multi-Cluster Ingress setup for global load balancing

- name: Get current region from bastion hostname
  shell: "hostname | grep -o 'bastion-[^-]*' | cut -d'-' -f2 || echo 'unknown'"
  register: current_region

- name: Set bastion region fact
  set_fact:
    bastion_region: "{{ current_region.stdout }}"

- name: Check if this is the config cluster (first region)
  set_fact:
    is_config_cluster: "{{ bastion_region == regions[0] }}"

- name: Debug MCI setup
  debug:
    msg: |
      Region: {{ bastion_region }}
      Is config cluster: {{ is_config_cluster }}
      Config cluster: {{ regions[0] }}

# Deploy service in all clusters
- name: Create OAuth2 Service for MCI
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: oauth2-proxy-mci
        namespace: "{{ app_namespace }}"
        labels:
          app: oauth2-proxy
          region: "{{ bastion_region }}"
        annotations:
          cloud.google.com/neg: '{"ingress": true}'
          cloud.google.com/backend-config: '{"default": "{{ project_name }}-backend-config"}'
      spec:
        type: ClusterIP
        selector:
          app: oauth2-proxy
        ports:
          - name: http
            port: 4180
            targetPort: 4180
            protocol: TCP
    wait: true
    wait_timeout: 60

# Only deploy MCI resources in the config cluster
- name: Setup Multi-Cluster Ingress (Config Cluster Only)
  when: is_config_cluster
  block:
    - name: Create MultiClusterService
      k8s:
        state: present
        definition:
          apiVersion: networking.gke.io/v1
          kind: MultiClusterService
          metadata:
            name: oauth2-proxy-mcs
            namespace: "{{ app_namespace }}"
            labels:
              app: oauth2-proxy
          spec:
            template:
              spec:
                selector:
                  app: oauth2-proxy
                ports:
                  - name: http
                    protocol: TCP
                    port: 4180
                    targetPort: 4180
        wait: true
        wait_timeout: 120

    - name: Create MultiClusterIngress
      k8s:
        state: present
        definition:
          apiVersion: networking.gke.io/v1
          kind: MultiClusterIngress
          metadata:
            name: oauth2-proxy-mci
            namespace: "{{ app_namespace }}"
            labels:
              app: oauth2-proxy
            annotations:
              networking.gke.io/static-ip: "{{ project_name }}-global-ip"
              networking.gke.io/managed-certificates: "{{ project_name }}-ssl-cert"
          spec:
            template:
              spec:
                backend:
                  serviceName: oauth2-proxy-mcs
                  servicePort: 4180
                rules:
                  - host: "{{ domain_name }}"
                    http:
                      paths:
                        - path: /*
                          backend:
                            serviceName: oauth2-proxy-mcs
                            servicePort: 4180
        wait: false

    - name: Create ManagedCertificate for MCI
      k8s:
        state: present
        definition:
          apiVersion: networking.gke.io/v1
          kind: ManagedCertificate
          metadata:
            name: "{{ project_name }}-ssl-cert"
            namespace: "{{ app_namespace }}"
            labels:
              app: oauth2-proxy
          spec:
            domains:
              - "{{ domain_name }}"
              - "www.{{ domain_name }}"
        wait: false

- name: Display MCI status
  debug:
    msg: |
      ‚úÖ Multi-Cluster Ingress setup completed for region: {{ bastion_region }}
      
      {% if is_config_cluster %}
      üéØ Config Cluster - MCI resources deployed:
      - MultiClusterService: oauth2-proxy-mcs
      - MultiClusterIngress: oauth2-proxy-mci
      - ManagedCertificate: {{ project_name }}-ssl-cert
      - Static IP: {{ project_name }}-global-ip
      {% else %}
      üì° Member Cluster - Service registered for MCI
      {% endif %}
      
      üåê Global URL: https://{{ domain_name }}
      
      ‚è±Ô∏è  Wait 5-10 minutes for MCI provisioning
      
      üîç Check status:
      kubectl get mci oauth2-proxy-mci -n {{ app_namespace }}
      kubectl describe mci oauth2-proxy-mci -n {{ app_namespace }}