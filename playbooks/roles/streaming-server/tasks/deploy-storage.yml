---
# Deploy GCS storage components (StorageClass, PV, PVC)
# File: playbooks/roles/streaming-server/tasks/deploy-storage.yml

- name: Get current region from bastion hostname
  shell: "hostname | grep -o 'bastion-[^-]*' | cut -d'-' -f2 || echo 'unknown'"
  register: current_region

- name: Set bastion region fact
  set_fact:
    bastion_region: "{{ current_region.stdout }}"

- name: Set current bucket name with fallback
  set_fact:
    current_bucket_name: "{{ regional_bucket_names[bastion_region] | default(project_name + '-content-' + bastion_region) }}"

- name: Display storage deployment info
  debug:
    msg: |
      💾 Deploying GCS storage components for region: {{ bastion_region }}
      📦 Regional bucket: {{ current_bucket_name }}
      🔐 Service account: {{ content_reader_sa_email | default('content-reader-sa@' + project_id + '.iam.gserviceaccount.com') }}

- name: Create storage manifests directory
  file:
    path: "{{ manifests_dir }}/storage"
    state: directory
    mode: '0755'

# TODO - ITS replacing region with 'asia' instead of 'asia-southeast1'
# TASK [streaming-server : Generate GCS StorageClass manifest] ***********************************************************************************************************************************************
#An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible.errors.AnsibleUndefinedVariable: 'dict object' has no attribute 'asia'
#fatal: [bastion-asia-southeast1]: FAILED! => {"changed": false, "msg": "AnsibleUndefinedVariable: 'dict object' has no attribute 'asia'"}
- name: Generate GCS StorageClass manifest
  template:
    src: gcs-storage-class.yaml.j2
    dest: "{{ manifests_dir }}/storage/gcs-storage-class.yaml"

- name: Generate GCS PersistentVolume manifest
  template:
    src: gcs-persistent-volume.yaml.j2
    dest: "{{ manifests_dir }}/storage/gcs-persistent-volume.yaml"

- name: Generate GCS PersistentVolumeClaim manifest
  template:
    src: gcs-persistent-volume-claim.yaml.j2
    dest: "{{ manifests_dir }}/storage/gcs-persistent-volume-claim.yaml"

- name: Apply GCS StorageClass
  k8s:
    state: present
    src: "{{ manifests_dir }}/storage/gcs-storage-class.yaml"
    wait: true
    wait_timeout: 60

- name: Apply GCS PersistentVolume
  k8s:
    state: present
    src: "{{ manifests_dir }}/storage/gcs-persistent-volume.yaml"
    wait: true
    wait_timeout: 60

- name: Apply GCS PersistentVolumeClaim
  k8s:
    state: present
    src: "{{ manifests_dir }}/storage/gcs-persistent-volume-claim.yaml"
    wait: true
    wait_timeout: 120

- name: Wait for PVC to be bound
  shell: |
    kubectl get pvc gcs-videos-pvc -n {{ app_namespace }} -o jsonpath='{.status.phase}'
  register: pvc_status
  until: pvc_status.stdout == "Bound"
  retries: 12
  delay: 10

- name: Get storage components status
  shell: |
    echo "=== StorageClass ==="
    kubectl get storageclass gcs-fuse-{{ bastion_region }}
    echo
    echo "=== PersistentVolume ==="
    kubectl get pv gcs-videos-pv-{{ bastion_region }}
    echo
    echo "=== PersistentVolumeClaim ==="
    kubectl get pvc gcs-videos-pvc -n {{ app_namespace }}
  register: storage_status

- name: Display storage deployment status
  debug:
    msg: |
      💾 GCS Storage Deployment Status for {{ bastion_region }}:
      
      {{ storage_status.stdout_lines | join('\n') }}
      
      ✅ Storage components ready for pod mounting
      📦 Regional bucket: {{ current_bucket_name }}
      🔗 PVC name: gcs-videos-pvc
      📁 Mount path will be: /mnt/videos (read-only)

- name: Verify PVC is bound correctly
  k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    name: gcs-videos-pvc
    namespace: "{{ app_namespace }}"
  register: pvc_info

- name: Display PVC binding details
  debug:
    msg: |
      🔍 PVC Binding Details:
      - Status: {{ pvc_info.resources[0].status.phase }}
      - Volume: {{ pvc_info.resources[0].spec.volumeName | default('Not bound') }}
      - Capacity: {{ pvc_info.resources[0].status.capacity.storage | default('Unknown') }}
      - Access Modes: {{ pvc_info.resources[0].status.accessModes | default([]) | join(', ') }}

- name: Check if storage is ready for pod deployment
  assert:
    that:
      - pvc_info.resources[0].status.phase == "Bound"
    fail_msg: "PVC is not bound - storage not ready for pod deployment"
    success_msg: "✅ Storage is ready - pods can now mount the GCS bucket"