apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ app_name }}
  namespace: {{ app_namespace }}
  labels:
    app: {{ app_name }}
    environment: {{ deployment_environment | default('production') }}
    streaming-type: hls
spec:
  replicas: {{ initial_replicas | default('2') }}  # Added replicas
  strategy:  # Added rolling update strategy
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ max_surge | default('50%') }}
      maxUnavailable: {{ max_unavailable | default('0') }}
  selector:
    matchLabels:
      app: {{ app_name }}
  template:
    metadata:
      labels:
        app: {{ app_name }}
        environment: {{ deployment_environment | default('production') }}
        streaming-type: hls
      annotations:
        prometheus.io/scrape: "{{ prometheus_scrape | default('true') }}"
        prometheus.io/port: "{{ metrics_port | default('9090') }}"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ app_name }}-sa

      affinity :
        podAntiAffinity :
          preferredDuringSchedulingIgnoredDuringExecution :
            - weight : 100
              podAffinityTerm :
                labelSelector :
                  matchExpressions :
                    - key : app
                      operator : In
                      values :
                        - {{ app_name }}
                topologyKey : "kubernetes.io/hostname"
      containers:
        - name: {{ app_name }}
          image: {{ docker_hub_image | default('nginx:alpine') }}:{{ docker_hub_tag | default('latest') }}
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: {{ metrics_port | default('9090') }}
              name: metrics
              protocol: TCP
          resources:
            requests:
              memory: "{{ app_memory_request | default('32Mi') }}"
              cpu: "{{ app_cpu_request | default('10m') }}"
            limits:
              memory: "{{ app_memory_limit | default('64Mi') }}"
              cpu: "{{ app_cpu_limit | default('50m') }}"
          readinessProbe:
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: {{ app_readiness_delay | default('10') }}
            periodSeconds: {{ app_health_period | default('5') }}
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: {{ app_liveness_delay | default('15') }}
            periodSeconds: {{ app_liveness_period | default('15') }}
            timeoutSeconds: 3
            failureThreshold: 3
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STREAMING_TYPE
              value: "hls"
            - name: NGINX_ENTRYPOINT_QUIET_LOGS
              value: "1"
            # GCS mount information for debugging
            - name: GCS_BUCKET_NAME
              value: "{{ current_bucket_name | default(project_name + '-content-' + bastion_region) }}"
            - name: REGION
              value: "{{ bastion_region | default('unknown') }}"
{% if custom_env_vars is defined %}
{% for env_var in custom_env_vars %}
            - name: {{ env_var.name }}
              value: "{{ env_var.value }}"
{% endfor %}
{% endif %}
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: html-content
              mountPath: /usr/share/nginx/html
              readOnly: true
            - name: hls-tmp
              mountPath: /tmp/hls
            # ðŸŽ¯ GCS FUSE mount - this is where the magic happens!
            - name: videos-storage
              mountPath: /mnt/videos
              readOnly: true
            - name: nginx-temp
              mountPath: /var/cache/nginx/temp
            - name: nginx-logs
              mountPath: /var/log/nginx
{% if extra_volume_mounts is defined %}
{% for mount in extra_volume_mounts %}
            - name: {{ mount.name }}
              mountPath: {{ mount.path }}
{% if mount.subPath is defined %}
              subPath: {{ mount.subPath }}
{% endif %}
{% if mount.readOnly is defined %}
              readOnly: {{ mount.readOnly }}
{% endif %}
{% endfor %}
{% endif %}
      volumes:
        - name: nginx-config
          configMap:
            name: {{ app_name }}-nginx-config
            defaultMode: 0644
        - name: html-content
          configMap:
            name: {{ app_name }}-html-content
            defaultMode: 0644
        - name: hls-tmp
          emptyDir: {}
        # ðŸŽ¯ GCS FUSE volume - mounts regional bucket content
        - name: videos-storage
          persistentVolumeClaim:
            claimName: gcs-videos-pvc
        - name: nginx-temp
          emptyDir: {}
        - name: nginx-logs
          emptyDir: {}
{% if extra_volumes is defined %}
{% for volume in extra_volumes %}
        - name: {{ volume.name }}
{% if volume.type == 'configMap' %}
          configMap:
            name: {{ volume.configMapName }}
{% elif volume.type == 'secret' %}
          secret:
            secretName: {{ volume.secretName }}
{% elif volume.type == 'persistentVolumeClaim' %}
          persistentVolumeClaim:
            claimName: {{ volume.claimName }}
{% elif volume.type == 'emptyDir' %}
          emptyDir: {}
{% endif %}
{% endfor %}
{% endif %}