# playbooks/roles/content-manager/tasks/main.yaml
# Content management setup for Admin VM
---

- name: Create content directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
  loop:
    - "{{ content_upload_dir }}"
    - "{{ content_scripts_dir }}"
    - "{{ content_logs_dir }}"
    - "{{ content_temp_dir }}"

- name: Install required packages for content management
  apt:
    name: "{{ content_packages }}"
    state: present
    update_cache: yes

- name: Create content sync script (master)
  template:
    src: sync-to-master.sh.j2
    dest: "{{ content_scripts_dir }}/sync-to-master.sh"
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create content sync script (regional)
  template:
    src: sync-to-regions.sh.j2
    dest: "{{ content_scripts_dir }}/sync-to-regions.sh"
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create content sync script (all-in-one)
  template:
    src: sync-all-content.sh.j2
    dest: "{{ content_scripts_dir }}/sync-all-content.sh"
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create content management utility script
  template:
    src: content-manager.sh.j2
    dest: "{{ content_scripts_dir }}/content-manager.sh"
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create content listing script
  template:
    src: list-content.sh.j2
    dest: "{{ content_scripts_dir }}/list-content.sh"
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create content cleanup script
  template:
    src: cleanup-content.sh.j2
    dest: "{{ content_scripts_dir }}/cleanup-content.sh"
    mode: '0755'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Add content scripts to PATH
  lineinfile:
    path: "/home/{{ admin_username }}/.bashrc"
    line: 'export PATH="$PATH:{{ content_scripts_dir }}"'
    state: present
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create content management aliases
  lineinfile:
    path: "/home/{{ admin_username }}/.bashrc"
    line: "{{ item }}"
    state: present
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
  loop:
    - "alias upload-content='cd {{ content_upload_dir }}'"
    - "alias sync-master='{{ content_scripts_dir }}/sync-to-master.sh'"
    - "alias sync-regions='{{ content_scripts_dir }}/sync-to-regions.sh'"
    - "alias sync-all='{{ content_scripts_dir }}/sync-all-content.sh'"
    - "alias list-content='{{ content_scripts_dir }}/list-content.sh'"
    - "alias content-help='{{ content_scripts_dir }}/content-manager.sh --help'"

- name: Create content upload instructions file
  template:
    src: README-content.md.j2
    dest: "{{ content_upload_dir }}/README.md"
    mode: '0644'
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Test gsutil access to master bucket
  command: gsutil ls gs://{{ master_bucket_name }}/
  register: gsutil_test
  failed_when: false
  changed_when: false

- name: Display content management setup status
  debug:
    msg: |
      ✅ Content Management Setup Complete!
      
      📁 Upload Directory: {{ content_upload_dir }}
      🔧 Scripts Directory: {{ content_scripts_dir }}
      📊 Master Bucket: {{ master_bucket_name }}
      🌍 Regional Buckets: {{ regional_bucket_names | length }} buckets
      
      🚀 Quick Commands (available after login):
      - upload-content    # Navigate to upload directory
      - sync-master       # Sync to master bucket
      - sync-regions      # Sync to all regional buckets
      - sync-all          # Sync to master + all regions
      - list-content      # List bucket contents
      - content-help      # Show help and usage
      
      📋 Manual Usage:
      1. Copy videos to: {{ content_upload_dir }}
      2. Run: sync-all
      3. Videos available at: https://{{ domain_name }}/videos/
      
      🔍 Bucket Access Test: {{ 'SUCCESS' if gsutil_test.rc == 0 else 'FAILED - Check service account permissions' }}
      
      📖 See {{ content_upload_dir }}/README.md for detailed instructions

- name: Verify content management is working
  stat:
    path: "{{ content_scripts_dir }}/sync-all-content.sh"
  register: content_setup_check

- name: Content management setup verification
  assert:
    that:
      - content_setup_check.stat.exists
      - content_setup_check.stat.executable
    fail_msg: "Content management setup failed - scripts not created properly"
    success_msg: "Content management setup verified successfully"